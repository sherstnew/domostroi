"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { useAuth } from "@/context/AuthContext";
import ProductSearch from "@/components/dashboard/ProductSearch";
import RecommendationSection from "@/components/dashboard/RecommendationSection";
import ProductGroups from "@/components/dashboard/ProductGroups";
import { Heart } from 'lucide-react';
import ProductCard from '@/components/ProductCard'
import Link from 'next/link';
import { useToasts } from '@/components/ui/toast'

export default function Dashboard() {
  const [favorites, setFavorites] = useState<string[]>([]);
  const [allProducts, setAllProducts] = useState<any[]>([])
  const [searchResults, setSearchResults] = useState<any[]>([]);
  const [groups, setGroups] = useState<any[]>([]);
  const [showAddToGroupFor, setShowAddToGroupFor] = useState<string | null>(
    null
  );
  const [selectedGroup, setSelectedGroup] = useState("");
  const router = useRouter();
  const { user, isLoading } = useAuth();
  const toasts = useToasts()
  const [prefs, setPrefs] = useState<any>({})

  // –†–µ–¥–∏—Ä–µ–∫—Ç –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  useEffect(() => {
    // load persisted favorites
    const loadFavs = async () => {
      try {
        const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null
        const res = await fetch("/api/favorites", { headers: token ? { Authorization: `Bearer ${token}` } : undefined });
        if (!res.ok) return;
        const data = await res.json();
        setFavorites(data.favorites || []);
      } catch (e) {
        console.error("Failed to load favorites", e);
      }
    };
    loadFavs();

    // load user groups for add-to-group modal
    const loadGroups = async () => {
      try {
        const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null
        const res = await fetch("/api/groups", { headers: token ? { Authorization: `Bearer ${token}` } : undefined });
        if (!res.ok) return;
        const data = await res.json();
        setGroups(data.groups || []);
      } catch (e) {
        console.error("Failed to load groups", e);
      }
    };
    loadGroups();

    // load user preferences (goals, etc.)
    const loadPrefs = async () => {
      try {
        const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null
        const res = await fetch('/api/user-preferences', { headers: token ? { Authorization: `Bearer ${token}` } : undefined })
        if (!res.ok) return
        const data = await res.json()
        setPrefs(data.preferences || {})
      } catch (e) {
        console.warn('Failed to load preferences', e)
      }
    }
    loadPrefs();

    const loadProducts = async () => {
      try {
        const token = localStorage.getItem('token')
        const res = await fetch('/api/products', { headers: token ? { Authorization: `Bearer ${token}` } : undefined })
        if (!res.ok) return
        const jd = await res.json()
        let prods = jd.products || []
        const selStore = (user as any)?.selectedStore
        if (selStore) {
          prods = [...prods].sort((a: any, b: any) => {
            const aHas = (a.stores || []).some((s: any) => String(s.storeId) === String(selStore) && s.available)
            const bHas = (b.stores || []).some((s: any) => String(s.storeId) === String(selStore) && s.available)
            if (aHas === bHas) return 0
            return aHas ? -1 : 1
          })
        }
        setAllProducts(prods)
        setSearchResults(prods)
      } catch (e) { console.error('Failed to load products', e) }
    }
    loadProducts()

    if (!isLoading && !user) {
      router.push("/login");
    }
  }, [user, isLoading, router]);

  if (isLoading) {
    return (
      <div className="min-h-screen jungle-bg leaf-pattern flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-[var(--light-green)] border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    );
  }

  if (!user) {
    return null; // –†–µ–¥–∏—Ä–µ–∫—Ç –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ useEffect
  }

  const toggleFavorite = async (productId: string) => {
    try {
      if (favorites.includes(productId)) {
        await fetch(`/api/favorites?productId=${productId}`, {
          method: "DELETE",
          credentials: "include",
        });
        setFavorites((prev) => prev.filter((id) => id !== productId));
      } else {
        await fetch("/api/favorites", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          credentials: "include",
          body: JSON.stringify({ productId }),
        });
        setFavorites((prev) => [...prev, productId]);
      }
    } catch (e) {
      console.error("Favorite toggle error", e);
    }
  };

  const addToGroupFromCard = async () => {
    if (!showAddToGroupFor) return;
    try {
      await fetch("/api/favorites", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          productId: showAddToGroupFor,
          groupId: selectedGroup || undefined,
        }),
      });
      // ensure ui reflects favorite
      if (!favorites.includes(showAddToGroupFor))
        setFavorites((prev) => [...prev, showAddToGroupFor]);
      setShowAddToGroupFor(null);
      setSelectedGroup("");
      // notify groups UI to refresh
      try {
        window.dispatchEvent(new Event("groups:updated"));
      } catch (e) {}
    } catch (e) {
      console.error("Add to group error", e);
    }
  };

  return (
    <div className="min-h-screen jungle-bg leaf-pattern">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-8">
          <h1 className="text-4xl font-bold text-[var(--dark-green)] mb-2 font-serif">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name}!
          </h1>
          <p className="text-xl text-gray-600">
            –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –∏–¥–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
          </p>
        </div>

        {/* –ü–æ–∏—Å–∫ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏ */}
        <ProductSearch
          onSearchResults={setSearchResults}
          products={allProducts}
          hasDiabetes={prefs?.healthConditions?.includes('diabetes')}
        />

        {/* –°–µ–∫—Ü–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–ª—è–º–∏ (—Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è) */}
        {prefs?.goals && (
          <div className="mt-6 mb-6 bg-white/80 rounded-lg p-4 border">
            <h3 className="text-lg font-medium text-[var(--dark-green)] mb-3">
              –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏
            </h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
              {prefs.goals.calories && (
                <div className="text-center p-3 bg-[var(--light-green)]/10 rounded">
                  <div className="font-medium text-[var(--dark-green)]">–ö–∞–ª–æ—Ä–∏–∏</div>
                  <div className="text-gray-700">{prefs.goals.calories} –∫–∫–∞–ª</div>
                </div>
              )}
              {prefs.goals.budget && (
                <div className="text-center p-3 bg-[var(--light-green)]/10 rounded">
                  <div className="font-medium text-[var(--dark-green)]">–ë—é–¥–∂–µ—Ç</div>
                  <div className="text-gray-700">{prefs.goals.budget} ‚ÇΩ</div>
                </div>
              )}
              {prefs.goals.mode === 'detailed' && prefs.goals.protein && (
                <div className="text-center p-3 bg-[var(--light-green)]/10 rounded">
                  <div className="font-medium text-[var(--dark-green)]">–ë–µ–ª–∫–∏</div>
                  <div className="text-gray-700">{prefs.goals.protein}–≥</div>
                </div>
              )}
              {prefs.goals.mode === 'detailed' && prefs.goals.carbs && (
                <div className="text-center p-3 bg-[var(--light-green)]/10 rounded">
                  <div className="font-medium text-[var(--dark-green)]">–£–≥–ª–µ–≤–æ–¥—ã</div>
                  <div className="text-gray-700">{prefs.goals.carbs}–≥</div>
                </div>
              )}
              {prefs.goals.mode === 'detailed' && prefs.goals.fat && (
                <div className="text-center p-3 bg-[var(--light-green)]/10 rounded">
                  <div className="font-medium text-[var(--dark-green)]">–ñ–∏—Ä—ã</div>
                  <div className="text-gray-700">{prefs.goals.fat}–≥</div>
                </div>
              )}
              {prefs.goals.mode === 'simple' && (
                <div className="text-center p-3 bg-[var(--light-green)]/10 rounded">
                  <div className="font-medium text-[var(--dark-green)]">–†–µ–∂–∏–º</div>
                  <div className="text-gray-700">–ü—Ä–æ—Å—Ç–æ–π</div>
                </div>
              )}
            </div>
            <div className="mt-3 text-xs text-gray-500">
              üí° –¶–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            </div>
          </div>
        )}

        {/* –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã */}
        <section className="mt-12">
          <h2 className="text-2xl font-bold text-[var(--dark-green)] mb-6 font-serif">
            –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
          </h2>
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {searchResults.length === 0 ? (
              <div className="col-span-full text-center text-gray-500 py-8">
                –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É
              </div>
            ) : (
              searchResults.map((product) => (
                <ProductCard
                  key={product._id || product.id}
                  product={product}
                  isFavorite={favorites.includes(product._id || product.id)}
                  onToggleFavorite={(id: string) => toggleFavorite(id)}
                />
              ))
            )}
          </div>
        </section>

        {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
        <RecommendationSection
          products={allProducts.slice(0, 6)}
          favorites={favorites}
          onToggleFavorite={toggleFavorite}
        />

        {/* –ì—Ä—É–ø–ø—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ */}
        <ProductGroups />

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É */}
        {showAddToGroupFor && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40">
            <div className="bg-white rounded-xl p-6 w-full max-w-md">
              <h3 className="text-lg font-bold mb-4">–î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É</h3>
              <div className="mb-4">
                <select
                  value={selectedGroup}
                  onChange={(e) => setSelectedGroup(e.target.value)}
                  className="w-full px-3 py-2 border rounded mb-3 text-[var(--text-color)]/90"
                >
                  <option value="">
                    -- –ë–µ–∑ –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ) --
                  </option>
                  {groups.map((g) => (
                    <option key={g._id || g._id} value={g._id || g._id}>
                      {g.name}
                    </option>
                  ))}
                </select>
                <div className="flex gap-2 justify-end">
                  <Button onClick={addToGroupFromCard} className="">
                    –î–æ–±–∞–≤–∏—Ç—å
                  </Button>
                  <Button
                    variant="ghost"
                    onClick={() => {
                      setShowAddToGroupFor(null);
                      setSelectedGroup("");
                    }}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </Button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}