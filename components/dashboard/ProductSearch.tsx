'use client'

import { useState } from 'react'
import { useToasts } from '@/components/ui/toast'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Checkbox } from '@/components/ui/checkbox'
import { Label } from '@/components/ui/label'

interface ProductSearchProps {
  onSearchResults: (results: any[]) => void
  products?: any[]
  hasDiabetes?: boolean
}

interface Filters {
  noSugar: boolean
  natural: boolean
  maxPrice: string
  carbsMin: string
  carbsMax: string
  proteinMin: string
  proteinMax: string
  fatMin: string
  fatMax: string
  calMin: string
  calMax: string
  breadUnitsMin: string
  breadUnitsMax: string
}

export default function ProductSearch({ onSearchResults, products = [], hasDiabetes = false }: ProductSearchProps) {
  const toasts = useToasts()
  const [searchTerm, setSearchTerm] = useState('')
  const [filtersOpen, setFiltersOpen] = useState(false)
  const [activePreset, setActivePreset] = useState<string | null>(null)
  const [bjuMode, setBjuMode] = useState<'simple' | 'detailed'>('simple')
  
  const [filters, setFilters] = useState<Filters>({
    noSugar: false,
    natural: false,
    maxPrice: '',
    carbsMin: '',
    carbsMax: '',
    proteinMin: '',
    proteinMax: '',
    fatMin: '',
    fatMax: '',
    calMin: '',
    calMax: '',
    breadUnitsMin: '',
    breadUnitsMax: '',
  })

  const [ingredientInput, setIngredientInput] = useState('')
  const [ingredientChips, setIngredientChips] = useState<string[]>([])

  // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
  const commonIngredients = ['—à–æ–∫–æ–ª–∞–¥', '–∞–±—Ä–∏–∫–æ—Å—ã', '—Å–∞—Ö–∞—Ä', '—Å–æ–ª—å', '–æ—Ä–µ—Ö–∏', '–º—ë–¥', '—è–≥–æ–¥—ã', '—Å—ã—Ä', '–º–æ–ª–æ–∫–æ', '—è–π—Ü–∞']

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    
    let results: any[] = []
    try {
      results = products.filter((p: any) => {
        // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        if (searchTerm && !(p.name + ' ' + p.description).toLowerCase().includes(searchTerm.toLowerCase())) return false
        
        // –§–∏–ª—å—Ç—Ä—ã –ø–æ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º
        if (filters.carbsMin && p.carbs < Number(filters.carbsMin)) return false
        if (filters.carbsMax && p.carbs > Number(filters.carbsMax)) return false
        if (filters.proteinMin && p.protein < Number(filters.proteinMin)) return false
        if (filters.proteinMax && p.protein > Number(filters.proteinMax)) return false
        if (filters.fatMin && p.fat < Number(filters.fatMin)) return false
        if (filters.fatMax && p.fat > Number(filters.fatMax)) return false
        
        // –ö–∞–ª–æ—Ä–∏–∏
        if (filters.calMin && p.calories < Number(filters.calMin)) return false
        if (filters.calMax && p.calories > Number(filters.calMax)) return false
        
        // –ë—é–¥–∂–µ—Ç
        if (filters.maxPrice && p.price > Number(filters.maxPrice)) return false
        
        // –•–ª–µ–±–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã (–¥–ª—è –¥–∏–∞–±–µ—Ç–∞)
        if (hasDiabetes) {
          const breadUnits = p.breadUnits || 0
          if (filters.breadUnitsMin && breadUnits < Number(filters.breadUnitsMin)) return false
          if (filters.breadUnitsMax && breadUnits > Number(filters.breadUnitsMax)) return false
        }
        
        // –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        const parts = ingredientChips.map(s => s.toLowerCase()).filter(Boolean)
        for (const part of parts) {
          if (!((p.description || '').toLowerCase().includes(part) || (p.tags || []).join(' ').toLowerCase().includes(part))) return false
        }
        
        // –§–ª–∞–≥–∏
        if (filters.noSugar && !(p.tags || []).some((t: string) => t.toLowerCase().includes('–±–µ–∑ —Å–∞—Ö–∞—Ä–∞') || t.toLowerCase().includes('–±–µ–∑ —Å–∞—Ö–∞—Ä–∞'))) return false
        if (filters.natural && !(p.tags || []).some((t: string) => t.toLowerCase().includes('–Ω–∞—Ç—É—Ä–∞–ª—å') || t.toLowerCase().includes('–Ω–∞—Ç—É—Ä–∞–ª'))) return false
        
        return true
      })
    } catch (err) {
      console.error('Search error', err)
      toasts?.add?.('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞', 'error')
      results = []
    }

    onSearchResults(results)
  }

  const handleFilterChange = (key: keyof Filters, value: string) => {
    setFilters(prev => ({
      ...prev,
      [key]: value
    }))
  }

  const handleCheckboxChange = (key: keyof Filters, checked: boolean) => {
    setFilters(prev => ({
      ...prev,
      [key]: checked
    }))
  }

  const applyPresetFilter = (type: 'moreProtein' | 'lessFat' | 'lowCarb' | 'balanced') => {
    if (activePreset === type) {
      setActivePreset(null)
      setFilters(prev => ({
        ...prev,
        proteinMin: '',
        proteinMax: '',
        fatMin: '',
        fatMax: '',
        carbsMin: '',
        carbsMax: ''
      }))
      return
    }

    setActivePreset(type)
    const newFilters = { ...filters }

    switch (type) {
      case 'moreProtein':
        newFilters.proteinMin = '20'
        newFilters.fatMax = '15'
        newFilters.carbsMax = '30'
        break
      case 'lessFat':
        newFilters.fatMax = '10'
        newFilters.proteinMin = '15'
        break
      case 'lowCarb':
        newFilters.carbsMax = '20'
        newFilters.proteinMin = '15'
        break
      case 'balanced':
        newFilters.proteinMin = '15'
        newFilters.carbsMax = '40'
        newFilters.fatMax = '20'
        break
    }

    setFilters(newFilters)
  }

  const resetAllFilters = () => {
    setSearchTerm('')
    setFilters({
      noSugar: false,
      natural: false,
      maxPrice: '',
      carbsMin: '',
      carbsMax: '',
      proteinMin: '',
      proteinMax: '',
      fatMin: '',
      fatMax: '',
      calMin: '',
      calMax: '',
      breadUnitsMin: '',
      breadUnitsMax: '',
    })
    setIngredientChips([])
    setActivePreset(null)
    setBjuMode('simple')
    
    try {
      onSearchResults(products)
    } catch (e) {
      console.warn('Failed to update search results on reset', e)
    }
  }

  const addIngredient = (ingredient: string) => {
    setIngredientChips(chips => Array.from(new Set([...chips, ingredient.toLowerCase()])))
  }

  return (
    <section className="card p-6 mb-8">
      <h2 className="text-2xl font-bold text-[var(--dark-green)] mb-6 font-serif">
        –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
      </h2>
      
      <form onSubmit={handleSearch} className="space-y-6">
        {/* –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ */}
        <div className="flex gap-4 flex-wrap lg:flex-nowrap">
          <Input
            type="text"
            placeholder="–ù–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="flex-1 bg-white/80 border-[var(--light-green)]/30 focus:border-[var(--light-green)]"
          />
          <div className="flex gap-2 flex-wrap lg:flex-nowrap">
            <Button type="submit" variant="default" className="bg-[var(--light-green)] hover:bg-[var(--light-green)]/90 text-white px-6">
              –ù–∞–π—Ç–∏
            </Button>
            <Button 
              type="button" 
              variant={filtersOpen ? "default" : "outline"}
              onClick={() => setFiltersOpen(o => !o)}
              className="border-[var(--light-green)] text-[var(--light-green)] hover:bg-[var(--light-green)]/10"
            >
              {filtersOpen ? '–°–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã' : '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã'}
            </Button>
          </div>
        </div>

        {/* –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
        <div className={`${filtersOpen ? 'block' : 'hidden'} space-y-6 animate-in fade-in duration-300`}>
          
          {/* –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 p-4 bg-gradient-to-r from-[var(--light-green)]/5 to-[var(--accent-orange)]/5 rounded-lg">
            
            {/* –û–±—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
            <div className="space-y-3">
              <Label className="block text-sm font-medium text-[var(--dark-green)]">–û–±—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã</Label>
              <div className="space-y-2">
                <div className="flex items-center gap-2 p-2 rounded hover:bg-white/50 cursor-pointer">
                  <Checkbox
                    id="noSugar"
                    checked={filters.noSugar}
                    onCheckedChange={(checked: boolean) => handleCheckboxChange('noSugar', checked)}
                    className="text-[var(--light-green)] focus:ring-[var(--light-green)]"
                  />
                  <Label
                    htmlFor="noSugar"
                    className="text-sm cursor-pointer flex items-center gap-1"
                  >
                    üç¨ –ë–µ–∑ —Å–∞—Ö–∞—Ä–∞
                  </Label>
                </div>
                <div className="flex items-center gap-2 p-2 rounded hover:bg-white/50 cursor-pointer">
                  <Checkbox
                    id="natural"
                    checked={filters.natural}
                    onCheckedChange={(checked: boolean) => handleCheckboxChange('natural', checked)}
                    className="text-[var(--light-green)] focus:ring-[var(--light-green)]"
                  />
                  <Label
                    htmlFor="natural"
                    className="text-sm cursor-pointer flex items-center gap-1"
                  >
                    üåø –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤
                  </Label>
                </div>
              </div>
            </div>

            {/* –ë—é–¥–∂–µ—Ç */}
            <div>
              <Label className="block text-sm font-medium text-[var(--dark-green)] mb-2">
                üí∞ –ú–∞–∫—Å. —Ü–µ–Ω–∞ (‚ÇΩ)
              </Label>
              <Input 
                type="number" 
                value={filters.maxPrice} 
                onChange={e => handleFilterChange('maxPrice', e.target.value)} 
                className="w-full bg-white/80 border-[var(--light-green)]/30"
                placeholder="–í–∞—à –±—é–¥–∂–µ—Ç" 
              />
            </div>

            {/* –†–µ–∂–∏–º –ë–ñ–£ */}
            <div className="space-y-3">
              <Label className="block text-sm font-medium text-[var(--dark-green)]">üìä –†–µ–∂–∏–º –ë–ñ–£</Label>
              <div className="flex gap-2">
                <Button
                  type="button"
                  variant={bjuMode === 'simple' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setBjuMode('simple')}
                  className={bjuMode === 'simple' ? 'bg-[var(--light-green)]' : 'border-[var(--light-green)] text-[var(--light-green)]'}
                >
                  –ü—Ä–æ—Å—Ç–æ–π
                </Button>
                <Button
                  type="button"
                  variant={bjuMode === 'detailed' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setBjuMode('detailed')}
                  className={bjuMode === 'detailed' ? 'bg-[var(--light-green)]' : 'border-[var(--light-green)] text-[var(--light-green)]'}
                >
                  –î–µ—Ç–∞–ª—å–Ω—ã–π
                </Button>
              </div>
            </div>

            {/* –î–ª—è –¥–∏–∞–±–µ—Ç–∞ */}
            {hasDiabetes && (
              <div>
                <Label className="block text-sm font-medium text-[var(--dark-green)] mb-2">
                  üçû –•–ª–µ–±–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
                </Label>
                <div className="flex gap-2">
                  <Input 
                    type="number" 
                    value={filters.breadUnitsMin} 
                    onChange={e => handleFilterChange('breadUnitsMin', e.target.value)} 
                    className="w-1/2 bg-white/80 border-[var(--light-green)]/30"
                    placeholder="–û—Ç" 
                  />
                  <Input 
                    type="number" 
                    value={filters.breadUnitsMax} 
                    onChange={e => handleFilterChange('breadUnitsMax', e.target.value)} 
                    className="w-1/2 bg-white/80 border-[var(--light-green)]/30"
                    placeholder="–î–æ" 
                  />
                </div>
              </div>
            )}
          </div>

          {/* –ö–∞–ª–æ—Ä–∏–∏ */}
          <div className="p-4 bg-white/50 rounded-lg border border-[var(--light-green)]/20">
            <h3 className="font-medium text-[var(--dark-green)] mb-3 flex items-center gap-2">
              üî• –ö–∞–ª–æ—Ä–∏–∏
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 max-w-md">
              <div>
                <Label className="block text-sm text-gray-600 mb-1">–û—Ç (–∫–∫–∞–ª)</Label>
                <Input 
                  type="number" 
                  value={filters.calMin} 
                  onChange={e => handleFilterChange('calMin', e.target.value)} 
                  className="bg-white border-[var(--light-green)]/30"
                  placeholder="–ú–∏–Ω–∏–º—É–º" 
                />
              </div>
              <div>
                <Label className="block text-sm text-gray-600 mb-1">–î–æ (–∫–∫–∞–ª)</Label>
                <Input 
                  type="number" 
                  value={filters.calMax} 
                  onChange={e => handleFilterChange('calMax', e.target.value)} 
                  className="bg-white border-[var(--light-green)]/30"
                  placeholder="–ú–∞–∫—Å–∏–º—É–º" 
                />
              </div>
            </div>
          </div>

          {/* –ë–ñ–£ */}
          <div className="p-4 bg-white/50 rounded-lg border border-[var(--light-green)]/20">
            <h3 className="font-medium text-[var(--dark-green)] mb-4 flex items-center gap-2">
              ü•ó –ë–µ–ª–∫–∏, –ñ–∏—Ä—ã, –£–≥–ª–µ–≤–æ–¥—ã
            </h3>

            {bjuMode === 'simple' ? (
              // –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º - –∫–Ω–æ–ø–∫–∏
              <div className="space-y-4">
                <div className="flex flex-wrap gap-2">
                  <Button 
                    type="button" 
                    variant={activePreset === 'moreProtein' ? 'default' : 'outline'} 
                    onClick={() => applyPresetFilter('moreProtein')}
                    className={activePreset === 'moreProtein' ? 'bg-[var(--light-green)]' : 'border-[var(--light-green)] text-[var(--light-green)]'}
                  >
                    ü•© –ë–æ–ª—å—à–µ –±–µ–ª–∫–∞
                  </Button>
                  <Button 
                    type="button" 
                    variant={activePreset === 'lessFat' ? 'default' : 'outline'} 
                    onClick={() => applyPresetFilter('lessFat')}
                    className={activePreset === 'lessFat' ? 'bg-[var(--light-green)]' : 'border-[var(--light-green)] text-[var(--light-green)]'}
                  >
                    ü•ë –ú–µ–Ω—å—à–µ –∂–∏—Ä–æ–≤
                  </Button>
                  <Button 
                    type="button" 
                    variant={activePreset === 'lowCarb' ? 'default' : 'outline'} 
                    onClick={() => applyPresetFilter('lowCarb')}
                    className={activePreset === 'lowCarb' ? 'bg-[var(--light-green)]' : 'border-[var(--light-green)] text-[var(--light-green)]'}
                  >
                    üçû –ù–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω—ã–µ
                  </Button>
                  <Button 
                    type="button" 
                    variant={activePreset === 'balanced' ? 'default' : 'outline'} 
                    onClick={() => applyPresetFilter('balanced')}
                    className={activePreset === 'balanced' ? 'bg-[var(--light-green)]' : 'border-[var(--light-green)] text-[var(--light-green)]'}
                  >
                    ‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
                  </Button>
                </div>
              </div>
            ) : (
              // –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–ª—è –≤–≤–æ–¥–∞
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="space-y-2">
                  <Label className="font-medium text-gray-700">ü•© –ë–µ–ª–∫–∏ (–≥)</Label>
                  <div className="flex gap-2">
                    <Input 
                      type="number" 
                      value={filters.proteinMin} 
                      onChange={e => handleFilterChange('proteinMin', e.target.value)} 
                      className="bg-white border-[var(--light-green)]/30"
                      placeholder="–û—Ç" 
                    />
                    <Input 
                      type="number" 
                      value={filters.proteinMax} 
                      onChange={e => handleFilterChange('proteinMax', e.target.value)} 
                      className="bg-white border-[var(--light-green)]/30"
                      placeholder="–î–æ" 
                    />
                  </div>
                </div>
                
                <div className="space-y-2">
                  <Label className="font-medium text-gray-700">ü•ë –ñ–∏—Ä—ã (–≥)</Label>
                  <div className="flex gap-2">
                    <Input 
                      type="number" 
                      value={filters.fatMin} 
                      onChange={e => handleFilterChange('fatMin', e.target.value)} 
                      className="bg-white border-[var(--light-green)]/30"
                      placeholder="–û—Ç" 
                    />
                    <Input 
                      type="number" 
                      value={filters.fatMax} 
                      onChange={e => handleFilterChange('fatMax', e.target.value)} 
                      className="bg-white border-[var(--light-green)]/30"
                      placeholder="–î–æ" 
                    />
                  </div>
                </div>
                
                <div className="space-y-2">
                  <Label className="font-medium text-gray-700">üçû –£–≥–ª–µ–≤–æ–¥—ã (–≥)</Label>
                  <div className="flex gap-2">
                    <Input 
                      type="number" 
                      value={filters.carbsMin} 
                      onChange={e => handleFilterChange('carbsMin', e.target.value)} 
                      className="bg-white border-[var(--light-green)]/30"
                      placeholder="–û—Ç" 
                    />
                    <Input 
                      type="number" 
                      value={filters.carbsMax} 
                      onChange={e => handleFilterChange('carbsMax', e.target.value)} 
                      className="bg-white border-[var(--light-green)]/30"
                      placeholder="–î–æ" 
                    />
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* –ñ–µ–ª–∞–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Å–æ—Å—Ç–∞–≤–µ */}
          <div className="p-4 bg-white/50 rounded-lg border border-[var(--light-green)]/20">
            <h3 className="font-medium text-[var(--dark-green)] mb-4 flex items-center gap-2">
              üéØ –ñ–µ–ª–∞–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Å–æ—Å—Ç–∞–≤–µ
            </h3>
            
            {/* –ë—ã—Å—Ç—Ä—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã */}
            <div className="mb-4">
              <Label className="text-sm text-gray-600 mb-3">–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:</Label>
              <div className="flex flex-wrap gap-2">
                {commonIngredients.map(ingredient => (
                  <Button
                    key={ingredient}
                    type="button"
                    variant={ingredientChips.includes(ingredient.toLowerCase()) ? "default" : "outline"}
                    size="sm"
                    onClick={() => addIngredient(ingredient)}
                    className={ingredientChips.includes(ingredient.toLowerCase()) ? 'bg-[var(--light-green)]' : 'border-[var(--light-green)] text-[var(--light-green)]'}
                  >
                    {ingredient}
                  </Button>
                ))}
              </div>
            </div>

            {/* –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ */}
            <div>
              <Label className="block text-sm font-medium text-gray-700 mb-2">
                –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:
              </Label>
              <div className="flex gap-2">
                <Input 
                  value={ingredientInput} 
                  onChange={e => setIngredientInput(e.target.value)} 
                  onKeyDown={e => {
                    if (e.key === 'Enter' && ingredientInput.trim()) {
                      e.preventDefault()
                      addIngredient(ingredientInput.trim())
                      setIngredientInput('')
                    }
                  }} 
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç..."
                  className="flex-1 bg-white border-[var(--light-green)]/30"
                />
                <Button 
                  type="button" 
                  onClick={() => { 
                    if (ingredientInput.trim()) { 
                      addIngredient(ingredientInput.trim())
                      setIngredientInput('') 
                    }
                  }} 
                  variant="outline"
                  className="border-[var(--light-green)] text-[var(--light-green)]"
                >
                  –î–æ–±–∞–≤–∏—Ç—å
                </Button>
              </div>
              
              {/* –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ */}
              {ingredientChips.length > 0 && (
                <div className="mt-4">
                  <div className="flex flex-wrap gap-2">
                    {ingredientChips.map(ingredient => (
                      <span key={ingredient} className="px-3 py-1 bg-[var(--light-green)]/20 text-[var(--dark-green)] rounded-full text-sm flex items-center gap-1">
                        {ingredient}
                        <button 
                          onClick={() => setIngredientChips(chips => chips.filter(x => x !== ingredient))} 
                          className="text-red-500 hover:text-red-700 ml-1 text-xs"
                        >
                          ‚úï
                        </button>
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex gap-3 pt-4 border-t border-[var(--light-green)]/20">
            <Button type="submit" variant="default" className="bg-[var(--light-green)] hover:bg-[var(--light-green)]/90 text-white px-8">
              üîç –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </Button>
            <Button type="button" variant="outline" onClick={resetAllFilters} className="border-gray-300 text-gray-600 hover:bg-gray-50">
              üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ
            </Button>
          </div>
        </div>
      </form>
    </section>
  )
}